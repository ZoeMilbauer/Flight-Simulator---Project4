@{
    ViewBag.Title = "Load";
}
<style>
    /* sets background image for div */
    .mapImg {
        background-image: url(/App_Data/export-map-share.png);
        width: 100%;
        height: 100%;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    /* sets canvas on all screen */
    #myCanvas {
        width: 100%;
        height: 100%;
    }

    /* sets the  */
    .flightinfo {
        position: absolute;
        color: white;
        font-size: 150%;
        top: 60px;
        left: 90px;
    }

    .flightinfotitle {
        font-size: 180%;
        font-family: 'Cooper Black';
        text-shadow: 2px 2px 5px black;
    }
</style>
<div class="mapImg" id="d">
    <canvas id="myCanvas"></canvas>
</div>

@* show Altitude and Speed on screen *@
<div class="flightinfo">
    <div class="flightinfotitle">Altitude: <span id="alt"></span></div>
    
    <div class="flightinfotitle">Speed: <span id="speed"></span></div>
   
</div>

<script>
    var canvas = document.getElementById("myCanvas");
    var ctx = canvas.getContext("2d");
    var lat, lon
    // sets interval time for loading data
    var IntervalTime = @Session["perSec"] * 1000
    var prevLat, prevLon
    var x, y
    /* get location of plane from controller */
    $.getJSON("@Url.Action("LoadValuesFromFile")").done(function (data) {
        // normalize location
        lon = ((data.x + 180) / 360) * canvas.width;
        lat = ((data.y + 90) / 180) * canvas.height;
        prevLon = lon;
        prevLat = lat;
        // draw a point on location
        ctx.beginPath();
        ctx.fillStyle = "#000080";
        ctx.arc(lon, lat, 2, 0, 2 * Math.PI, true);
        ctx.fill();
        ctx.beginPath();
        ctx.fillStyle = "red";
        ctx.arc(lon, lat, 1, 0, 2 * Math.PI, true);
        ctx.fill();
        // sets altitude and speed from loaded data
        document.getElementById("alt").innerHTML = data.z;
        document.getElementById("speed").innerHTML = data.w;
        ctx.lineWidth = 1;
        ctx.strokeStyle = "red";
        ctx.beginPath();
        ctx.moveTo(lon, lat);
        x = lon
        y = lat
        var startTime = new Date().getTime();
        var id = setInterval(myTimer, IntervalTime); // do myTimer 4 times in a second
        // load data from controller and draw it on screen
        function myTimer() {
            $.getJSON("@Url.Action("LoadValuesFromFile")").done(function (data) {
                // if file was ended, stop loading and alert user the scenario in over
                if (data.length==1) {
                    alert("The scenario is over!");
                    clearInterval(id);
                    return;
                }
                document.getElementById("alt").innerHTML = data.z;
                document.getElementById("speed").innerHTML = data.w;
                // normalize location
                lon = ((data.x + 180) / 360) * canvas.width;
                lat = ((data.y + 90) / 180) * canvas.height;
                 // if current location is different from previous location, draw a line to it  
                if (prevLat != lat && prevLon != lon) {
                    //if (lon - prevLon > 0) {
                    //    x += 0.2;
                    //}
                    //else {
                    //    x -= 0.2;
                    //}
                    //if (lat - prevLat > 0) {
                    //    y += 0.2;
                    //}
                    //else {
                    //    y -= 0.2;
                    //}
                    //ctx.lineTo(x, y);
                    //ctx.stroke();
                    ctx.lineTo(lon, lat);
                    ctx.stroke();
                    prevLat = lat;
                    prevLon = lon;
                }
            });
        };
    });
</script>
